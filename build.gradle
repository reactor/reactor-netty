/*
 * Copyright (c) 2011-2016 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
	maven { url "http://repo.spring.io/plugins-release" }
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
			'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE',
			'com.github.jengelman.gradle.plugins:shadow:1.2.0',
			'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.8'
  }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.2'
}

description = 'Reactive Streams Netty driver'

ext {
  gradleVersion = '2.8'
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  reactorCoreVersion = "3.0.5.RELEASE"
  reactorIpcVersion = "0.6.1.BUILD-SNAPSHOT"

  // Languages
  groovyVersion = '2.4.1'

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'
  testAddonVersion = '3.0.5.BUILD-SNAPSHOT'

  // Libraries
  nettyVersion = '4.1.8.Final'
  jacksonDatabindVersion = '2.5.1'
  protobufVersion = '2.6.1'
  kryoVersion = '3.0.3'
  snappyVersion = '1.1.1.6'
  aeronVersion = '0.9.4'
  rxJavaVersion = '1.0.14'

  // Testing
  mockitoVersion = '1.10.19'
  spockVersion = '1.0-groovy-2.4'

  javadocLinks = ["http://docs.oracle.com/javase/7/docs/api/",
				  "http://docs.oracle.com/javaee/6/api/",
				  "http://fasterxml.github.io/jackson-databind/javadoc/2.5/",
				  "http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/",
				  "http://projectreactor.io/docs/core/release/api/",
				  "http://netty.io/4.1/api/",
				  "http://projectreactor.io/docs/ipc/release/api/",
				  "http://projectreactor.io/docs/netty/release/api/",] as String[]
}

apply from: "$gradleScriptDir/setup.gradle"
apply from: "$gradleScriptDir/doc.gradle"

configure(rootProject) { project ->
  group = 'io.projectreactor.ipc'

  apply plugin: 'propdeps'
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply from: "${gradleScriptDir}/ide.gradle"


  apply plugin: 'osgi'
  apply plugin: 'groovy'

  ext.bundleImportPackages = ['com.fasterxml.jackson.core;resolution:=optional',
							  'com.fasterxml.jackson.databind;resolution:=optional',
							  'com.fasterxml.jackson.module;resolution:=optional',
							  '*']

  [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
														   "-Xlint:cast",
														   "-Xlint:classfile",
														   "-Xlint:dep-ann",
														   "-Xlint:divzero",
														   "-Xlint:empty",
														   "-Xlint:finally",
														   "-Xlint:overrides",
														   "-Xlint:path",
														   "-Xlint:processing",
														   "-Xlint:static",
														   "-Xlint:try",
														   "-Xlint:deprecation",
														   "-Xlint:unchecked",
														   "-Xlint:-serial",      // intentionally disabled
														   "-Xlint:-options",     // intentionally disabled
														   "-Xlint:-fallthrough", // intentionally disabled
														   "-Xlint:-rawtypes"     // TODO enable and fix warnings
  ]

  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  if (JavaVersion.current().isJava8Compatible()) {
	compileTestJava.options.compilerArgs += "-parameters"
	tasks.withType(Javadoc) {
	  options.addStringOption('Xdoclint:none', '-quiet')
	}
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

  configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
  }

  project.tasks.withType(Test).all {
	systemProperty("java.awt.headless", "true")
	systemProperty("reactor.trace.cancel", "true")
	systemProperty("reactor.trace.nocapacity", "true")
	systemProperty("testGroups", project.properties.get("testGroups"))
	scanForTestClasses = false
	include '**/*Tests.*'
	include '**/*Spec.*'
	exclude '**/*Abstract*.*'
  }

  repositories {
	if (version.endsWith('BUILD-SNAPSHOT') || project.hasProperty('platformVersion')) {
	  mavenLocal()
	  maven { url 'http://repo.spring.io/libs-snapshot' }
	}
	maven { url 'http://repo.spring.io/libs-milestone' }
	maven { url 'http://repo.spring.io/libs-release' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	jcenter()
	mavenCentral()
  }

  // dependencies that are common across all java projects
  dependencies {
	// JSR-305 annotations
	optional "com.google.code.findbugs:jsr305:3.0.0"

	// Logging
	optional "org.slf4j:slf4j-api:$slf4jVersion"

	compile "io.projectreactor.ipc:reactor-ipc:$reactorIpcVersion"
	compile "io.projectreactor:reactor-core:$reactorCoreVersion"

	//Default reactor-netty impl
	compile "io.netty:netty-all:$nettyVersion"

	// Testing
	testCompile "org.apache.httpcomponents:fluent-hc:4.3.6"
	testCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
	testCompile "io.reactivex:rxjava:$rxJavaVersion"
	testCompile "io.projectreactor.addons:reactor-test:$testAddonVersion"

	testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"

	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
	// Testing
	testCompile "org.codehaus.groovy:groovy:$groovyVersion",
			"org.spockframework:spock-core:$spockVersion",
			"org.hamcrest:hamcrest-library:1.3",
			"org.testng:testng:6.8.5"
  }


  if (project.hasProperty('platformVersion')) {
	apply plugin: 'spring-io'

	repositories {
	  maven { url 'http://repo.spring.io/libs-snapshot' }
	}

	dependencyManagement {
	  springIoTestRuntime {
		imports {
		  mavenBom "io.spring.platform:platform-bom:$platformVersion"
		}
	  }
	}
  }


  jar {
	manifest {
	  instruction 'Import-Package', bundleImportPackages.join(',')
	}
  }
}

configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}