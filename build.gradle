/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import aQute.bnd.gradle.BundleTaskConvention

buildscript {
  repositories {
	maven { url "https://repo.spring.io/plugins-release" }
  }
  dependencies {
	classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
			'com.google.gradle:osdetector-gradle-plugin:1.4.0',
			'biz.aQute.bnd:biz.aQute.bnd.gradle:4.2.0'
  }
}

plugins {
  id "com.github.hierynomus.license" version "0.14.0"
  id 'org.asciidoctor.convert' version '1.5.11'
  id 'com.github.johnrengelman.shadow' version '5.0.0'
  id "com.jfrog.artifactory" version "4.9.8" apply false
}

description = 'Reactive Streams Netty driver'

ext {
  if (project.hasProperty('versionBranch') && version.toString().endsWith(".BUILD-SNAPSHOT")) {
	versionBranch = versionBranch.replaceAll("\"", "").trim()
	if (!versionBranch.isEmpty()) {
	  realVersion = version.toString().replace("BUILD-SNAPSHOT", versionBranch + ".BUILD-SNAPSHOT")
	  project.version = realVersion
	  println "Building special snapshot ${project.version}"
	}
  }

  gradleScriptDir = "${rootProject.projectDir}/gradle"

  //NOTE: reactor dependencies versions are now defined in gradle.properties
  blockHoundVersion = "1.0.1.RELEASE"

  //Metrics
  micrometerVersion = '1.3.0' //optional baseline: technically could work with 1.2.x, should work with any 1.3.x

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'
  testAddonVersion = reactorCoreVersion
  assertJVersion = '3.6.1'

  // Netty
  nettyDefaultVersion = '4.1.43.Final'
  if (!project.hasProperty("forceNettyVersion")) {
	nettyVersion = nettyDefaultVersion
  }
  else {
	nettyVersion = forceNettyVersion
	println "Netty version defined from command line: ${forceNettyVersion}"
  }

  // Libraries
  jacksonDatabindVersion = '2.5.1'

  // Testing
  mockitoVersion = '1.10.19'
  hoverflyJavaVersion = '0.11.1'

  javadocLinks = ["https://docs.oracle.com/javase/7/docs/api/",
				  "https://docs.oracle.com/javaee/6/api/",
				  "https://fasterxml.github.io/jackson-databind/javadoc/2.5/",
				  "https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
				  "https://projectreactor.io/docs/core/release/api/",
				  "https://netty.io/4.1/api/",
				  "https://projectreactor.io/docs/netty/release/api/",] as String[]

	bndOptions = [
			"Export-Package": "!reactor.netty.internal*,reactor.netty.*;-noimport:=true",
			"Import-Package": '!javax.annotation,io.netty.channel.kqueue;resolution:=optional;version="[4.1,5)",io.netty.handler.codec.haproxy;resolution:=optional;version="[4.1,5)",io.micrometer.*;resolution:=optional,reactor.blockhound.*;resolution:=optional,*',
			"Bundle-Name" : "reactor-netty",
			"Bundle-SymbolicName" : "io.projectreactor.netty.reactor-netty"
	]
}


configure(rootProject) { project ->
  group = 'io.projectreactor.netty'

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply from: "$gradleScriptDir/releaser.gradle"
  apply from: "$gradleScriptDir/setup.gradle"
  apply plugin: 'propdeps'
  apply plugin: "biz.aQute.bnd.builder"
  apply from: "${gradleScriptDir}/errorprone.gradle"
  apply plugin: 'com.google.osdetector'
  apply plugin: 'idea'

  jacoco {
	toolVersion = '0.7.7.201606060606'
  }

  jacocoTestReport {
	reports {
	  xml.enabled = true
	  html.enabled = true
	}
  }

  [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
														   "-Xlint:cast",
														   "-Xlint:classfile",
														   "-Xlint:dep-ann",
														   "-Xlint:divzero",
														   "-Xlint:empty",
														   "-Xlint:finally",
														   "-Xlint:overrides",
														   "-Xlint:path",
														   "-Xlint:processing",
														   "-Xlint:static",
														   "-Xlint:try",
														   "-Xlint:deprecation",
														   "-Xlint:unchecked",
														   "-Xlint:-serial",      // intentionally disabled
														   "-Xlint:-options",     // intentionally disabled
														   "-Xlint:-fallthrough", // intentionally disabled
														   "-Xlint:rawtypes"
  ]

  compileJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
  }

  if (JavaVersion.current().isJava8Compatible()) {
	compileTestJava.options.compilerArgs += "-parameters"
	tasks.withType(Javadoc) {
	  options.addStringOption('Xdoclint:none', '-quiet')
	  options.addStringOption('encoding', 'UTF-8')
	}
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

  configurations.all {
	exclude group: 'commons-logging', module: 'commons-logging'
  }

  project.tasks.withType(Test).all {
	// run tests with IPv4 only when IPv6 is available
	if (project.hasProperty('preferIPv4Stack')) {
		systemProperty("java.net.preferIPv4Stack", "true")
	}
	// run tests with preferring IPv6 addresses
	if (project.hasProperty('preferIPv6Addresses')) {
		systemProperty("java.net.preferIPv6Addresses", "true")
	}
	systemProperty("java.awt.headless", "true")
	systemProperty("reactor.trace.cancel", "true")
	systemProperty("reactor.trace.nocapacity", "true")
	systemProperty("testGroups", project.properties.get("testGroups"))
	systemProperty("io.netty.leakDetection.level", "paranoid")
	scanForTestClasses = false
	include '**/*Tests.*'
	include '**/*Test.*'
	include '**/*Spec.*'
	exclude '**/*Abstract*.*'
  }

  test {
	testLogging {
	  events  "passed", "failed"
	  showExceptions true
	  exceptionFormat "full"
	  maxGranularity 3
	}

	onOutput { descriptor, event ->
	  if (event.message.contains("ResourceLeakDetector")) {
		logger.error("ERROR: Test: " + descriptor + " produced resource leak: " + event.message )
	  }
	}
  }

	sourceSets {
		jarFileTest
	}

	//TODO evaluate if this is still necessary, if not remove that and `idea` plugin
	idea.module.testSourceDirs += sourceSets.jarFileTest.allSource.srcDirs

	repositories {
	mavenCentral()
	if (version.endsWith('BUILD-SNAPSHOT')) {
	  if (System.getenv ()["bamboo_buildNumber"] == null) {
		mavenLocal()
	  } else {
		println 'Bamboo CI detected, avoiding use of mavenLocal()'
	  }
	  maven { url 'https://repo.spring.io/libs-snapshot' }
	  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	maven { url 'https://repo.spring.io/libs-milestone' }
	maven { url 'https://repo.spring.io/libs-release' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	jcenter()
  }

	def os_suffix = ""
	if (osdetector.classifier in ["linux-x86_64"] || ["osx-x86_64"] || ["windows-x86_64"]) {
		os_suffix = ":" + osdetector.classifier
	}

	configurations {
		shaded
	}

	// dependencies that are common across all java projects
  dependencies {
	// JSR-305 annotations
	compileOnly "com.google.code.findbugs:jsr305:3.0.2"

	compile "io.netty:netty-handler-proxy:${nettyVersion}"
	compile "io.netty:netty-codec-http2:${nettyVersion}"
	optional "io.netty:netty-codec-haproxy:${nettyVersion}"

	//Metrics
	optional "io.micrometer:micrometer-core:${micrometerVersion}"

	// Logging
	optional "org.slf4j:slf4j-api:$slf4jVersion"

	compile "io.projectreactor:reactor-core:$reactorCoreVersion"
	shaded("io.projectreactor.addons:reactor-pool:$reactorPoolVersion") {
		exclude module: "reactor-core"
	}
	optional "io.projectreactor.tools:blockhound:$blockHoundVersion"

	compile "io.netty:netty-handler:${nettyVersion}"
	compile "io.netty:netty-codec-http:${nettyVersion}"

	//transport resolution: typical build forces epoll but not kqueue transitively
	//on the other hand, if we want to make transport-specific tests, we'll make all
	// native optional at compile time and add correct native/nio to testRuntime
	if (project.hasProperty("forceTransport")) {
	  //so that the main code compiles
	  optional "io.netty:netty-transport-native-epoll:${nettyVersion}"
	  optional "io.netty:netty-transport-native-kqueue:${nettyVersion}"
	  //now we explicitly add correctly qualified native, or do nothing if we want to test NIO
	  if (forceTransport == "native") {
		if (osdetector.os == "osx") {
		  testRuntime "io.netty:netty-transport-native-kqueue:${nettyVersion}${os_suffix}"
		}
		else if (osdetector.os == "linux") {
		  testRuntime "io.netty:netty-transport-native-epoll:${nettyVersion}${os_suffix}"
		}
	  }
	  else if (forceTransport != "nio") {
		throw new InvalidUserDataException("invalid -PforceTranport option " + forceTransport + ", should be native|nio")
	  }
	}
	else {
	  //classic build to be distributed
	  compile "io.netty:netty-transport-native-epoll:${nettyVersion}:linux-x86_64"
	  optional "io.netty:netty-transport-native-kqueue:${nettyVersion}"
	}

	// Testing
	testCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
	testCompile "io.projectreactor:reactor-test:$testAddonVersion"
	testCompile "org.hamcrest:hamcrest-library:1.3"
	testCompile "org.assertj:assertj-core:$assertJVersion"
	testCompile "io.specto:hoverfly-java:${hoverflyJavaVersion}"
	testCompile "org.apache.tomcat.embed:tomcat-embed-core:9.0.20"

	testRuntime "org.slf4j:jcl-over-slf4j:$slf4jVersion"

	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"

	// Needed for HTTP/2 testing
	testRuntime "io.netty:netty-tcnative-boringssl-static:2.0.26.Final" + os_suffix

	jarFileTestCompile 'org.assertj:assertj-core:3.12.2'
	jarFileTestCompile 'junit:junit:4.12'

	for (dependency in project.configurations.shaded.dependencies) {
	    compileOnly(dependency)
	}
  }

  jar {
	classifier = 'original'

	manifest {
	  attributes("Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
			  "Implementation-Title": project.name,
			  "Implementation-Version": project.version,
			  "Automatic-Module-Name": "reactor.netty")
	}
	bnd(bndOptions)
  }

  check.dependsOn jacocoTestReport

  shadowJar {
	  configure {
		  it.convention.plugins.bundle = new BundleTaskConvention(it)
		  doLast {
			  buildBundle()
		  }
	  }
	  bnd(bndOptions)

	  classifier = null

	  dependsOn(project.tasks.jar)

	  manifest {
		  inheritFrom project.tasks.jar.manifest
	  }

	  configurations = [project.configurations.shaded]

	  project.afterEvaluate {
		  dependencies {
			  def shadedDependencies = project.configurations
					  .shaded
					  .dependencies
					  .collect { "${it.group}:${it.name}".toString() }
					  .toSet()

			  // Exclude every compile-scoped dependency (including the transitive ones)
			  for (id in project.configurations.compile.resolvedConfiguration.resolvedArtifacts*.moduleVersion*.id) {
				  def module = "${id.group}:${id.name}".toString()
				  if (!shadedDependencies.contains(module)) {
					  project.configurations.shaded.exclude(group: id.group, module: id.name)
					  exclude(dependency(module))
				  }
			  }
		  }
	  }

	  exclude 'META-INF/maven*/**'
  }

  task relocateShadowJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation) {
	  target = tasks.shadowJar
	  prefix = "reactor.netty.internal.shaded"
  }

  tasks.shadowJar.dependsOn tasks.relocateShadowJar

  //add shadowJar to the publication
  publishing.publications.mavenJava.artifact(shadowJar)

  task jarFileTest(type: Test) {
	  testClassesDirs = sourceSets.jarFileTest.output.classesDirs
	  classpath = sourceSets.jarFileTest.runtimeClasspath

	  systemProperty("jarFile", shadowJar.outputs.files.singleFile)

	  dependsOn(shadowJar)
  }
  project.tasks.check.dependsOn(jarFileTest)

  project.tasks.compileTestJava.classpath += configurations.shaded
  project.tasks.test.classpath += configurations.shaded

  task shadedJarTest(type: Test) {
	  testClassesDirs = sourceSets.test.output.classesDirs

	  Set<? super File> mainOutputs = [
			  project.sourceSets.main.output.resourcesDir,
			  project.sourceSets.main.java.outputDir,
	  ]

	  classpath = shadowJar.outputs.files
	  // Exclude main outputs since we have the shaded JAR on the classpath already
	  classpath += sourceSets.test.runtimeClasspath.filter { !(it in mainOutputs) }

	  //The imports are not relocated, we do relocation only for the main sources not the tests
	  exclude '**/*PooledConnectionProviderTest*.*'

	  dependsOn(shadowJar)
  }
  project.tasks.check.dependsOn(shadedJarTest)
}

configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

  license {
    header rootProject.file('codequality/HEADER')
    includes(["**/*.java", "**/*.css"])
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
        css = 'SLASHSTAR_STYLE'
    }
  }
}
