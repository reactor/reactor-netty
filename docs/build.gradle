/*
 * Copyright (c) 2024 VMware, Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
	id 'org.hidetake.ssh' version "$hidetakeSshVersion"
}

description = "Reactor Netty spring.io docs"

// Build a zip that contains both javadoc + reference doc
task deployDocsZip(type: Zip) {
	if (!file('../reactor-netty/build').exists()) {
		logger.debug('Adding dependency on asciidoctor, asciidoctorPdf, javadoc')
		// normally, it is expected the github workflow has already built ../reactor-netty/build/,
		// if it's not the case, let's force rebuild of docs+javadocs
		dependsOn(':reactor-netty:asciidoctor', ':reactor-netty:asciidoctorPdf', ':reactor-netty:javadoc')
	}

	archiveBaseName.set("reactor-netty")
	archiveClassifier.set("apidocs")

	from('../reactor-netty/build/asciidoc/pdf') {
		include 'index.pdf'  // Include only the index.pdf file
		into("reference/pdf/")
		includeEmptyDirs = false
		eachFile { fileCopyDetails ->
			if (fileCopyDetails.name == 'index.pdf') {
				fileCopyDetails.name = "reactor-netty-reference-guide-${rootProject.version}.pdf"
			}
		}
	}
	from('../reactor-netty/build/asciidoc/') {
		includeEmptyDirs = false
		exclude "**/index.pdf"
		into("reference/html/")
	}
	from('../reactor-netty/build/docs/javadoc/') {
		into "api"
	}
}

remotes {
	docs {
		if (project.hasProperty('deployDocsSshHostKey') && project.hasProperty('deployDocsHost') && project.hasProperty('deployDocsSshUsername') && project.hasProperty('deployDocsSshKey')) {
			// write content of known hosts into a temp file
			def knownHostsFile = File.createTempFile("known_hosts_", ".txt")
			knownHostsFile.text = project.findProperty('deployDocsSshHostKey')
			knownHostsFile.deleteOnExit()

			// configure ssh
			role 'docs'
			knownHosts = knownHostsFile
			host = project.findProperty('deployDocsHost')
			user = project.findProperty('deployDocsSshUsername')
			identity = identity = project.findProperty('deployDocsSshKey')
			retryCount = 5 // retry 5 times (default is 0)
			retryWaitSec = 3 // wait 10 seconds between retries (default is 0)
		}
		else {
			logger.debug("deployDocs ssh initialization skipped (no deployDocsSshHostKey/deployDocsHost/deployDocsSshUsername/deployDocsSshKey defined)")
		}
	}
}

// Deploy javadoc + reference to doc.spring.io:/opt/www/domains/spring.io/docs/htdocs/projectreactor/PROJECT_NAME/docs/PROJECT_VERSION/api/
// Deploy reference (html) to doc.spring.io:/opt/www/domains/spring.io/docs/htdocs/projectreactor/PROJECT_NAME/docs/PROJECT_VERSION/reference/html
// Deploy reference (pdf if any) to doc.spring.io:/opt/www/domains/spring.io/docs/htdocs/projectreactor/PROJECT_NAME/docs/PROJECT_VERSION/reference/pdf
task deployDocs(dependsOn: [deployDocsZip]) {
	doLast {
		// Check if rootProject.name and rootProject.version are defined
		if (!project.rootProject.hasProperty('name') || !project.rootProject.hasProperty('version')) {
			throw new GradleException("deployDocs task failed: project.rootProject.name or project.rootProject.version undefined")
		}

		if (!project.hasProperty('deployDocsSshHostKey') || !project.hasProperty('deployDocsHost') ||
				!project.hasProperty('deployDocsSshUsername') || !project.hasProperty('deployDocsSshKey')) {
			throw new GradleException("deployDocs task failed: deployDocsSshHostKey/deployDocsHost/deployDocsSshUsername/deployDocsSshKey properties undefined")
		}

		ssh.run {
			session(project.remotes.docs) {
				def now = System.currentTimeMillis()
				def name = project.rootProject.name
				def version = project.rootProject.version
				def tempPath = "/tmp/${name}-${now}-apidocs/".replaceAll(' ', '_')
				execute "mkdir -p $tempPath"

				// Download docs zip
				project.tasks.deployDocsZip.outputs.each { o ->
					put from: o.files, into: tempPath
				}

				// Unzip it in temp dir
				execute "unzip $tempPath*.zip -d $tempPath"

				// Move content to target extract dir
				def extractPath = "/opt/www/domains/spring.io/docs/htdocs/projectreactor/${name}/docs/${version}/"

				execute "rm -rf $extractPath"
				execute "mkdir -p $extractPath"
				execute "mv $tempPath* $extractPath"
				execute "chmod -R g+w $extractPath"
				execute "rm -rf $tempPath"
				execute "rm -f $extractPath*.zip"

				// update sym links with autoln command
				execute "/opt/www/domains/spring.io/docs/autoln/bin/autoln create --scan-dir=/opt/www/domains/spring.io/docs/htdocs/projectreactor/${name}/docs/ --maxdepth=2"
			}
		}
	}
}


