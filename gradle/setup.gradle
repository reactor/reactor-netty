/*
 * Copyright (c) 2011-2023 VMware, Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.util.VersionNumber

if (project.name == 'reactor-netty-examples') {
	return
}

apply plugin: 'maven-publish'
//we also conditionally apply artifactory and signing plugins below

task sourcesJar(type: Jar) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	archiveClassifier.set('javadoc')
	from javadoc
}

static def qualifyVersion(String v) {
	def versionNumber = VersionNumber.parse(v)

	if (versionNumber == VersionNumber.UNKNOWN) return "BAD";

	if (versionNumber.qualifier == null || versionNumber.qualifier.size() == 0) return "RELEASE" //new scheme
	if (versionNumber.qualifier == "RELEASE") return "RELEASE" //old scheme
	if (versionNumber.qualifier.matches("(?:M|RC)\\d+")) return "MILESTONE"
	if (versionNumber.qualifier == "SNAPSHOT" || versionNumber.qualifier == "BUILD-SNAPSHOT") return "SNAPSHOT"

	return "BAD"
}

static def outputToGha(String versionType, String fullVersion) {
	def ghaFilename = System.getenv("GITHUB_OUTPUT")
	if (ghaFilename == null) {
		println "::set-output name=versionType::$versionType"
		println "::set-output name=fullVersion::$fullVersion"
	}
	else {
		println "using GITHUB_OUTPUT file"
		def ghaFile = new File(ghaFilename)
		ghaFile.withWriterAppend {
			it.newLine()
			it.append("versionType=$versionType")
			it.newLine()
			it.append("fullVersion=$fullVersion")
		}
	}
}

task qualifyVersionGha() {
	doLast {
		def versionType = qualifyVersion("$version")
		//we ensure that if at least _one_ submodule version is BAD, we only output versionType=BAD + job fails
		if (versionType == "BAD") {
			outputToGha(versionType, version)
			println "::error ::Unable to parse $version to a VersionNumber with recognizable qualifier"
			throw new TaskExecutionException(tasks.getByName("qualifyVersionGha"), new IllegalArgumentException("Unable to parse $version to a VersionNumber with recognizable qualifier"))
		}
		println "Recognized $version as $versionType"

		//only output the versionType and fullVersion for the main artifact
		if (project.name == 'reactor-netty') {
			outputToGha(versionType, version)
		}
	}
}

publishing {
	repositories {
		maven {
			name = "mock"
			url = "${rootProject.buildDir}/mockRepo"
		}
		if (qualifyVersion("$version") == "RELEASE") {
			maven {
				name = "sonatype"
				url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
				credentials {
					username findProperty("sonatypeUsername")
					password findProperty("sonatypePassword")
				}
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			//consider adding extra artifacts here, conditionally on submodule's name and perhaps in an afterEvaluate block

			pom {
				afterEvaluate {
					name = project.description
					description = project.description
				}
				packaging = 'jar' //if not explicitly set, end up as `pom` in output. omitted in output if set as `jar`...

				url = 'https://github.com/reactor/reactor-netty'
				organization {
					name = 'reactor'
					url = 'https://github.com/reactor'
				}
				licenses {
					license {
						name = 'The Apache Software License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution = 'repo'
					}
				}
				scm {
					url = 'https://github.com/reactor/reactor-netty'
					connection = 'scm:git:git://github.com/reactor/reactor-netty'
					developerConnection = 'scm:git:git://github.com/reactor/reactor-netty'
				}
				developers {
					developer {
						id = 'simonbasle'
						name = 'Simon BaslÃ©'
						email = 'sbasle@vmware.com'
					}
					developer {
						id = 'violetagg'
						name = 'Violeta Georgieva'
						email = 'violetag@vmware.com'
					}
				}
				issueManagement {
					system = "GitHub Issues"
					url = "https://github.com/reactor/reactor-netty/issues"
				}

				withXml {
					//groovy magic incantation to sort dependencies alphabetically (scope/group/name..)
					def sorted = asNode().dependencies[0].children().collect().sort { it.scope.text() + it.groupId.text() + it.artifactId.text() }
					asNode().dependencies[0].children().with { deps ->
						deps.clear()
						sorted.each { deps.add(it) }
					}
				}
			}
		}
	}
}

if (rootProject.hasProperty("artifactory_publish_password")) {
	apply plugin: "com.jfrog.artifactory"

	artifactoryPublish {
		publications(publishing.publications.mavenJava)
	}
}

if (qualifyVersion("$version") in ["RELEASE", "MILESTONE"] || rootProject.hasProperty("forceSigning")) {
	apply plugin: 'signing'

	signing {
		//requiring signature if there is a publish task that is not to MavenLocal
		required { gradle.taskGraph.allTasks.any { it.name.toLowerCase().contains("publish") && !it.name.contains("MavenLocal") } }
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")

		useInMemoryPgpKeys(signingKey, signingPassword)

		afterEvaluate {
			sign publishing.publications.mavenJava
		}
	}
}