/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		// version 1.5.3 doesn't contain https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/222
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
	}
}

configure(rootProject) {
  apply plugin: "java"
  apply plugin: org.asciidoctor.gradle.AsciidoctorPlugin // use class name, plugin id not available due to https://github.com/gradle/gradle/issues/1262

  // put asciidoctor dependendencies/extensions to 'asciidoctor' configuration instead of buildscript classpath
  dependencies {
	asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.16'
	asciidoctor 'org.jruby:jruby-complete:9.1.17.0' // fixes PDF rendering on Windows
  }

  asciidoctorj {
	  version = '1.5.6' // use more recent asciidoctorj version
  }

  javadoc {
	dependsOn jar
	group = "Reactor Netty Javadoc"

	description = "Generates aggregated Javadoc API documentation."
	title = "Reactor Netty ${version}"

	if (JavaVersion.current().isJava8Compatible()) {
	  compileTestJava.options.compilerArgs += "-parameters"
	  tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
	  }
	}

	options.addStringOption('charSet', 'UTF-8')

	options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = "Reactor Netty"
	options.overview = "src/api/overview.html"
	options.stylesheetFile = file("src/api/stylesheet.css")
	options.links(rootProject.ext.javadocLinks)

	maxMemory = "1024m"
	destinationDir = new File(buildDir, "docs/javadoc")
	source rootProject.sourceSets.main.allJava
	doFirst {
	  classpath = files(rootProject.sourceSets.main.compileClasspath)
	}
  }

  asciidoctor {
	sources {
	  include "index.asciidoc"
	}
	outputDir file("$buildDir/asciidoc")
	backends = ['html5', 'pdf']
	//logDocuments = true
	options = [
			doctype: 'book'
	]
	attributes docinfo: '',
			toc2: '',
			'compat-mode': '',
			stylesdir: "stylesheets/",
			stylesheet: 'golo.css',
			appversion: "$version",
			'source-highlighter': 'coderay'

	doLast {
	  file("$outputDir/pdf/index.pdf").
			  renameTo("$outputDir/pdf/netty-reference-guide-${version}.pdf")
	}
  }

  task docsZip(type: Zip, dependsOn: asciidoctor) {
	baseName = 'reactor-netty-docs'
	from("$buildDir/asciidoc/pdf/reactor-netty-reference-guide-${version}.pdf") { into ("docs/") }
	from("$buildDir/asciidoc/html5/index.html") { into("docs/") }
	from("$buildDir/asciidoc/html5/images") { into("images/") }
  }
}

