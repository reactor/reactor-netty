name: Check Matrix

on:
  pull_request: {}
permissions: read-all
jobs:
  preliminary:
    name: preliminary sanity checks
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0 #needed by spotless
      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00
        with:
          distribution: 'temurin'
          java-version: 8
      - name: spotless (license header)
        if: always()
        run: ./gradlew clean spotlessCheck -PspotlessFrom=origin/${{ github.base_ref }}
      - name: api compatibility
        if: always()
        run: ./gradlew clean japicmp
      - name: how to fix
        if: failure()
        # the foreground (38;5) color code 208 is orange. we also have bold, white bg (38;5;0;48;5;255m), white fg on black bg...
        run: |
          echo -e "\n\033[38;5;0;48;5;208m \u001b[1m How to deal with errors in preliminary job: \u001b[0m\033[0m"
          echo "(Have a look at the steps above to see what failed exactly)"
          echo -e "\n - \u001b[1mSpotless (license headers)\u001b[0m failures on touched java files \033[38;5;255;48;5;0m\u001b[1mcan be automatically fixed by running\u001b[0m:"
          echo -e "   \033[38;5;0;48;5;255m ./gradlew spotlessApply \033[0m"
          echo -e "\n - \u001b[1mAPI Compatibility\u001b[0m failures should be considered carefully and \033[38;5;255;48;5;0m\u001b[1mdiscussed with maintainers in the PR\u001b[0m"
          echo "   If there are failures, the detail should be available in the step's log:"
          echo -e "   Look for the \033[38;5;0;48;5;255m API compatibility failures \033[0m block(s)."
          echo "   Alternatively, locally run the following command to get access to the full report:"
          echo -e "   \033[38;5;0;48;5;255m ./gradlew japicmp \033[0m"
          echo ""
          exit -1

  build:
    needs: preliminary
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022]
        transport: [native, nio]
        #transport: [native, nio, io_uring]
        exclude:
          # excludes native on Windows (there's none)
          - os: windows-2022
            transport: native
          #- os: windows-2022
          #  transport: io_uring
          #- os: macos-13
          #  transport: io_uring
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: gradle/actions/wrapper-validation@8379f6a1328ee0e06e2bb424dadb7b159856a326
      - name: Set up JDK 17
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00
        with:
            distribution: 'temurin'
            java-version: '17'
      - name: Set up JDK 1.8
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00
        with:
          distribution: 'temurin'
          java-version: '8'
      - name: Build and test with Java 8
        #if: ${{ ! startsWith(matrix.transport, 'io_uring') }}
        run: ./gradlew clean check -x :reactor-netty-core:java17Test --no-daemon -x spotlessCheck -PforceTransport=${{ matrix.transport }}
      #- name: Build and test IO_Uring on Java 17
        #if: ${{ startsWith(matrix.transport, 'io_uring') }}
        #run: ./gradlew clean check -x :reactor-netty-core:test -x :reactor-netty-core:shadedJarTest -PtestToolchain=17 --no-daemon -x spotlessCheck -PforceTransport=${{ matrix.transport }}
      - name: Build and test UDS with NIO on Java 17
        if: ${{ ! startsWith(matrix.os, 'windows') }}
        run: ./gradlew reactor-netty-http:test --tests reactor.netty.http.server.HttpServerTests.testHttpServerWithDomainSockets_HTTP11Post -PtestToolchain=17 --no-daemon -x spotlessCheck -PforceTransport=nio
